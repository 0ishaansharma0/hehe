//insertion sort
#include <iostream>

using namespace std;

int insertionSort(int arr[], int n) {
    int comparisons = 0;
    for (int i = 1; i < n; ++i) {
        int key = arr[i];
        int j = i - 1;
        while (j >= 0 && arr[j] > key) {
            comparisons++;
            arr[j + 1] = arr[j];
            j--;
        }
        arr[j + 1] = key;
    }
    return comparisons;
}

int main() {
    int arr[] = {12, 11, 13, 5, 6};
    int n = sizeof(arr) / sizeof(arr[0]);
    int comparisons = insertionSort(arr, n);

    cout << "Sorted array:";
    for (int i = 0; i < n; ++i)
        cout << " " << arr[i];
    cout << endl;

    cout << "Number of comparisons: " << comparisons << endl;

    return 0;
}






//merge sort
#include <iostream>

using namespace std;

int merge(int arr[], int left, int mid, int right) {
    int comparisons = 0;
    int n1 = mid - left + 1;
    int n2 = right - mid;

    int L[n1], R[n2];

    for (int i = 0; i < n1; i++)
        L[i] = arr[left + i];
    for (int j = 0; j < n2; j++)
        R[j] = arr[mid + 1 + j];

    int i = 0, j = 0, k = left;
    while (i < n1 && j < n2) {
        comparisons++;
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        } else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }

    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }

    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }

    return comparisons;
}

int mergeSort(int arr[], int left, int right) {
    int comparisons = 0;
    if (left < right) {
        int mid = left + (right - left) / 2;

        comparisons += mergeSort(arr, left, mid);
        comparisons += mergeSort(arr, mid + 1, right);

        comparisons += merge(arr, left, mid, right);
    }
    return comparisons;
}

int main() {
    int arr[] = {12, 11, 13, 5, 6, 7};
    int size = sizeof(arr) / sizeof(arr[0]);
    int comparisons = mergeSort(arr, 0, size - 1);

    cout << "Sorted array:";
    for (int i = 0; i < size; i++)
        cout << " " << arr[i];
    cout << endl;

    cout << "Number of comparisons: " << comparisons << endl;

    return 0;
}


//quick sort
#include <iostream>

using namespace std;

int comparisons = 0;

void swap(int& a, int& b) {
    int temp = a;
    a = b;
    b = temp;
}

int partition(int arr[], int low, int high) {
    int pivot = arr[high];
    int i = low - 1;
    for (int j = low; j < high; j++) {
        comparisons++;
        if (arr[j] < pivot) {
            i++;
            swap(arr[i], arr[j]);
        }
    }
    swap(arr[i + 1], arr[high]);
    return i + 1;
}

void quickSort(int arr[], int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);

        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}

int main() {
    int arr[] = {12, 11, 13, 5, 6, 7};
    int n = sizeof(arr) / sizeof(arr[0]);
    quickSort(arr, 0, n - 1);

    cout << "Sorted array:";
    for (int i = 0; i < n; i++)
        cout << " " << arr[i];
    cout << endl;

    cout << "Number of comparisons: " << comparisons << endl;

    return 0;
}




//Strassen
#include <iostream>

using namespace std;

void add(int** A, int** B, int** C, int n) {
    for (int i = 0; i < n; ++i)
        for (int j = 0; j < n; ++j)
            C[i][j] = A[i][j] + B[i][j];
}

void subtract(int** A, int** B, int** C, int n) {
    for (int i = 0; i < n; ++i)
        for (int j = 0; j < n; ++j)
            C[i][j] = A[i][j] - B[i][j];
}

void strassenMultiply(int** A, int** B, int** C, int n) {
    if (n == 1) {
        C[0][0] = A[0][0] * B[0][0];
        return;
    }

    int newSize = n / 2;

    int** A11 = A;
    int** A12 = A + newSize;
    int** A21 = A + newSize * n;
    int** A22 = A + newSize * n + newSize;

    int** B11 = B;
    int** B12 = B + newSize;
    int** B21 = B + newSize * n;
    int** B22 = B + newSize * n + newSize;

    int** C11 = C;
    int** C12 = C + newSize;
    int** C21 = C + newSize * n;
    int** C22 = C + newSize * n + newSize;

    int** P1 = new int*[newSize];
    int** P2 = new int*[newSize];
    int** P3 = new int*[newSize];
    int** P4 = new int*[newSize];
    int** P5 = new int*[newSize];
    int** P6 = new int*[newSize];
    int** P7 = new int*[newSize];

    for (int i = 0; i < newSize; ++i) {
        P1[i] = new int[newSize];
        P2[i] = new int[newSize];
        P3[i] = new int[newSize];
        P4[i] = new int[newSize];
        P5[i] = new int[newSize];
        P6[i] = new int[newSize];
        P7[i] = new int[newSize];
    }

    subtract(B12, B22, P1, newSize);
    strassenMultiply(A11, P1, P1, newSize);

    add(A11, A12, P2, newSize);
    strassenMultiply(P2, B22, P2, newSize);

    add(A21, A22, P3, newSize);
    strassenMultiply(P3, B11, P3, newSize);

    subtract(B21, B11, P4, newSize);
    strassenMultiply(A22, P4, P4, newSize);

    add(A11, A22, P5, newSize);
    add(B11, B22, P6, newSize);
    strassenMultiply(P5, P6, P5, newSize);

    subtract(A12, A22, P6, newSize);
    add(B21, B22, P7, newSize);
    strassenMultiply(P6, P7, P6, newSize);

    add(A11, A12, P5, newSize);
    subtract(B12, B22, P7, newSize);
    strassenMultiply(P5, P7, P5, newSize);

    add(A21, A22, P5, newSize);
    subtract(B21, B11, P7, newSize);
    strassenMultiply(P5, P7, P5, newSize);

    add(P5, P4, P5, newSize);
    add(P5, P6, P5, newSize);

    add(P5, P3, P5, newSize);
    add(P5, P1, P5, newSize);

    for (int i = 0; i < newSize; ++i) {
        for (int j = 0; j < newSize; ++j) {
            C11[i][j] = P5[i][j];
            C12[i][j] = P2[i][j];
            C21[i][j] = P3[i][j];
            C22[i][j] = P4[i][j];
        }
    }

    for (int i = 0; i < newSize; ++i) {
        delete[] P1[i];
        delete[] P2[i];
        delete[] P3[i];
        delete[] P4[i];
        delete[] P5[i];
        delete[] P6[i];
        delete[] P7[i];
    }

    delete[] P1;
    delete[] P2;
    delete[] P3;
    delete[] P4;
    delete[] P5;
    delete[] P6;
    delete[] P7;
}

int main() {
    int n = 4;
    int** A = new int*[n];
    int** B = new int*[n];
    int** C = new int*[n];
    for (int i = 0; i < n; ++i) {
        A[i] = new int[n];
        B[i] = new int[n];
        C[i] = new int[n];
    }

    // Input matrices A and B
    int a[4][4] = {{1, 2, 3, 4},
                   {5, 6, 7, 8},
                   {9, 10, 11, 12},
                   {13, 14, 15, 16}};

    int b[4][4] = {{17, 18, 19, 20},
                   {21, 22, 23, 24},
                   {25, 26, 27, 28},
                   {29, 30, 31, 32}};

    // Copy elements to dynamically allocated matrices
    for (int i = 0; i < n; ++i)
        for (int j = 0; j < n; ++j) {
            A[i][j] = a[i][j];
            B[i][j] = b[i][j];
        }

    // Multiply matrices
    strassenMultiply(A, B, C, n);

    // Output result
    cout << "Resultant Matrix:" << endl;
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j)
            cout << C[i][j] << " ";
        cout << endl;
    }

    // Free memory
    for (int i = 0; i < n; ++i) {
        delete[] A[i];
        delete[] B[i];
        delete[] C[i];
    }
    delete[] A;
    delete[] B;
    delete[] C;

    return 0;
}




//countsort
#include <iostream>
#include <vector>

using namespace std;

void countSort(vector<int>& arr) {
    int max_element = *max_element(arr.begin(), arr.end());
    int min_element = *min_element(arr.begin(), arr.end());

    int range = max_element - min_element + 1;
    vector<int> count(range), output(arr.size());

    for (int i = 0; i < arr.size(); i++)
        count[arr[i] - min_element]++;

    for (int i = 1; i < range; i++)
        count[i] += count[i - 1];

    for (int i = arr.size() - 1; i >= 0; i--) {
        output[count[arr[i] - min_element] - 1] = arr[i];
        count[arr[i] - min_element]--;
    }

    for (int i = 0; i < arr.size(); i++)
        arr[i] = output[i];
}

int main() {
    vector<int> arr = {4, 2, 2, 8, 3, 3, 1};
    cout << "Original array: ";
    for (int num : arr)
        cout << num << " ";
    cout << endl;

    countSort(arr);

    cout << "Sorted array: ";
    for (int num : arr)
        cout << num << " ";
    cout << endl;

    return 0;
}



//BFS
#include <iostream>
#include <list>
#include <queue>

using namespace std;

class Graph {
    int V; // Number of vertices

    // Array of lists to store adjacency lists
    list<int>* adj;

public:
    Graph(int V) {
        this->V = V;
        adj = new list<int>[V];
    }

    // Function to add an edge to the graph
    void addEdge(int v, int w) {
        adj[v].push_back(w); // Add w to vâ€™s list
    }

    // Function to perform BFS traversal starting from given vertex
    void BFS(int s) {
        // Mark all the vertices as not visited
        bool* visited = new bool[V];
        for (int i = 0; i < V; i++)
            visited[i] = false;

        // Create a queue for BFS
        queue<int> queue;

        // Mark the current node as visited and enqueue it
        visited[s] = true;
        queue.push(s);

        while (!queue.empty()) {
            // Dequeue a vertex from queue and print it
            s = queue.front();
            cout << s << " ";
            queue.pop();

            // Get all adjacent vertices of the dequeued vertex s
            // If an adjacent vertex has not been visited, then mark it visited and enqueue it
            for (auto i = adj[s].begin(); i != adj[s].end(); ++i) {
                if (!visited[*i]) {
                    visited[*i] = true;
                    queue.push(*i);
                }
            }
        }

        delete[] visited;
    }
};

int main() {
    // Create a graph given in the example
    Graph g(4);
    g.addEdge(0, 1);
    g.addEdge(0, 2);
    g.addEdge(1, 2);
    g.addEdge(2, 0);
    g.addEdge(2, 3);
    g.addEdge(3, 3);

    cout << "Breadth First Traversal (starting from vertex 2): ";
    g.BFS(2);
    cout << endl;

    return 0;
}



//dfs
#include <iostream>
#include <vector>
#include <stack>

using namespace std;

class Graph {
    int V; // Number of vertices

    // Vector of vectors to store adjacency lists
    vector<vector<int>> adj;

public:
    Graph(int V) {
        this->V = V;
        adj.resize(V);
    }

    // Function to add an edge to the graph
    void addEdge(int v, int w) {
        adj[v].push_back(w); // Add w to vâ€™s list
    }

    // Function to perform DFS traversal starting from given vertex
    void DFS(int s) {
        // Vector to keep track of visited vertices
        vector<bool> visited(V, false);

        // Create a stack for DFS
        stack<int> stack;

        // Push the starting vertex onto the stack
        stack.push(s);

        // DFS loop
        while (!stack.empty()) {
            // Pop a vertex from stack and print it
            s = stack.top();
            stack.pop();

            // If the vertex is not visited yet, mark it as visited and process its neighbors
            if (!visited[s]) {
                cout << s << " ";
                visited[s] = true;

                // Push all adjacent vertices of the popped vertex onto the stack
                for (int i : adj[s]) {
                    if (!visited[i])
                        stack.push(i);
                }
            }
        }
    }
};

int main() {
    // Create a graph given in the example
    Graph g(4);
    g.addEdge(0, 1);
    g.addEdge(0, 2);
    g.addEdge(1, 2);
    g.addEdge(2, 0);
    g.addEdge(2, 3);
    g.addEdge(3, 3);

    cout << "Depth First Traversal (starting from vertex 2): ";
    g.DFS(2);
    cout << endl;

    return 0;
}



//prims
#include <iostream>
#include <vector>
#include <queue>
#include <climits>

using namespace std;

class Graph {
    int V; // Number of vertices

    // Vector of vectors to store adjacency lists and weights
    vector<vector<pair<int, int>>> adj;

public:
    Graph(int V) {
        this->V = V;
        adj.resize(V);
    }

    // Function to add an edge to the graph
    void addEdge(int u, int v, int weight) {
        adj[u].push_back({v, weight});
        adj[v].push_back({u, weight}); // Undirected graph
    }

    // Function to find the minimum spanning tree using Prim's algorithm
    void primMST() {
        vector<bool> inMST(V, false); // To track vertices in MST
        vector<int> key(V, INT_MAX); // To store the key values
        vector<int> parent(V, -1); // To store the parent vertices in MST

        // Priority queue to store vertices with their key values
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;

        // Start with vertex 0
        int src = 0;
        pq.push({0, src});
        key[src] = 0;

        while (!pq.empty()) {
            int u = pq.top().second;
            pq.pop();

            inMST[u] = true;

            for (auto it = adj[u].begin(); it != adj[u].end(); ++it) {
                int v = it->first;
                int weight = it->second;

                if (!inMST[v] && weight < key[v]) {
                    key[v] = weight;
                    pq.push({key[v], v});
                    parent[v] = u;
                }
            }
        }

        // Print the minimum spanning tree
        cout << "Edges in Minimum Spanning Tree using Prim's algorithm:" << endl;
        for (int i = 1; i < V; i++)
            cout << "Edge: " << parent[i] << " - " << i << " Weight: " << key[i] << endl;
    }
};

int main() {
    // Create a graph given in the example
    Graph g(5);
    g.addEdge(0, 1, 2);
    g.addEdge(0, 3, 6);
    g.addEdge(1, 2, 3);
    g.addEdge(1, 3, 8);
    g.addEdge(1, 4, 5);
    g.addEdge(2, 4, 7);
    g.addEdge(3, 4, 9);

    // Find minimum spanning tree using Prim's algorithm
    g.primMST();

    return 0;
}





//knapsack
#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

// Function to solve the 0-1 Knapsack problem
int knapsack(int W, int weights[], int values[], int n) {
    // Create a 2D array to store the maximum value at each n and W
    vector<vector<int>> K(n + 1, vector<int>(W + 1));

    // Build the table K[][] in bottom-up manner
    for (int i = 0; i <= n; i++) {
        for (int w = 0; w <= W; w++) {
            if (i == 0 || w == 0)
                K[i][w] = 0;
            else if (weights[i - 1] <= w)
                K[i][w] = max(values[i - 1] + K[i - 1][w - weights[i - 1]], K[i - 1][w]);
            else
                K[i][w] = K[i - 1][w];
        }
    }

    // The last cell of the table contains the maximum value
    return K[n][W];
}

int main() {
    int values[] = {60, 100, 120};
    int weights[] = {10, 20, 30};
    int W = 50; // Maximum weight capacity of the knapsack
    int n = sizeof(values) / sizeof(values[0]);

    cout << "Maximum value in Knapsack = " << knapsack(W, weights, values, n) << endl;

    return 0;
}
